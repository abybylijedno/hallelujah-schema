{"version":3,"sources":["schema.ts"],"names":[],"mappings":"AAAA,gFAAgF;AAChF,mBAAmB;AACnB,yCAAyC;AACzC,EAAE;AACF,EAAE;AACF,wBAAwB;AACxB,kBAAkB;AAClB,EAAE;AACF,EAAE;AACF,uBAAuB;AACvB,kDAAkD;AAClD,EAAE;AACF,EAAE;AACF,4EAA4E;AAC5E,+BAA+B;AAC/B,oBAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACpB,SAAS,SAAS,EAAE,iBAAiB,EAAe,SAAS,EAAE,cAAc,QAAuB,QAAQ;AAE5G,OAAO,IAAM,eAAe,IAAI,WAAY;IAC5C;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAI;IACpD;IAAK;IAAK;IAAG;IAAG;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IACtD;IAAI;IAAI;IAAI;IAAI;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IACtD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IACtD;IAAI;IAAI;IAAI;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAI;IACtD;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IACtD;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IACvD;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAG;IACvD;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IACxD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IACvD;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IACtD;IAAI;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IACvD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAG;IAAK;IAAK;IAClD;IAAK;IAAG;IAAK;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAI;IACrD;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAI;IAAK;IAAK;IACrD;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAK;IAAK;IAAK;IAAG;IAAK;IAAK;IACtD;IAAK;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IACtD;IAAG;IAAG;IAAG;IAAG;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IACnD;IAAI;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAK;IAAK;IACrD;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAK;IAAK;IAAK;IAAK;IACxD;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAI;IAAK;IAClD;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IACrD;IAAK;IAAK;IAAK;IAAI;IAAI;IAAK;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IACxD;IAAG;IAAK;IAAK;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAG;IAAK;IAClD;IAAK;IAAK;IAAG;IAAG;IAAI;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAG;IAAG;IACvD;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IACrD;IAAK;IAAK;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAK;IACnD;IAAK;IAAK;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG;IAAK;IAAK;IAAK;IAAK;IACnD;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","file":"schema.js","sourcesContent":["//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//\n//       bebopc version:\n//           3.1.3\n//\n//\n//       bebopc source:\n//           https://github.com/betwixt-labs/bebop\n//\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\nimport { BebopView, BebopRuntimeError, BebopRecord, BebopJson, BebopTypeGuard, Guid, GuidMap } from \"bebop\";\n\nexport const BEBOP_SCHEMA = new Uint8Array ([\n3, 6, 0, 0, 0, 67, 111, 109, 109, 97, 110, 100, 84, 121,\n112, 101, 0, 4, 0, 251, 255, 255, 255, 0, 4, 0, 0, 0, 9,\n69, 82, 82, 79, 82, 0, 0, 1, 0, 0, 0, 72, 69, 76, 76, 79,\n0, 0, 2, 0, 0, 0, 83, 69, 83, 83, 73, 79, 78, 95, 67, 82,\n69, 65, 84, 69, 0, 0, 3, 0, 0, 0, 83, 69, 83, 83, 73, 79,\n78, 95, 68, 69, 76, 69, 84, 69, 0, 0, 4, 0, 0, 0, 83, 69,\n83, 83, 73, 79, 78, 95, 74, 79, 73, 78, 0, 0, 5, 0, 0, 0,\n83, 69, 83, 83, 73, 79, 78, 95, 76, 69, 65, 86, 69, 0, 0,\n6, 0, 0, 0, 83, 69, 83, 83, 73, 79, 78, 95, 71, 69, 84, 0,\n0, 7, 0, 0, 0, 83, 69, 83, 83, 73, 79, 78, 95, 73, 78, 70,\n79, 0, 0, 8, 0, 0, 0, 83, 79, 78, 71, 95, 86, 69, 82, 83,\n69, 0, 0, 9, 0, 0, 0, 69, 114, 114, 111, 114, 0, 1, 0, 0,\n5, 0, 0, 0, 0, 2, 99, 111, 100, 101, 0, 254, 255, 255,\n255, 0, 109, 115, 103, 0, 245, 255, 255, 255, 0, 85, 115,\n101, 114, 0, 2, 0, 5, 0, 0, 0, 2, 110, 97, 109, 101, 0,\n245, 255, 255, 255, 0, 1, 117, 105, 100, 0, 245, 255, 255,\n255, 0, 2, 83, 101, 115, 115, 105, 111, 110, 0, 2, 0, 5,\n0, 0, 0, 4, 105, 100, 0, 245, 255, 255, 255, 0, 1, 110,\n97, 109, 101, 0, 245, 255, 255, 255, 0, 2, 111, 119, 110,\n101, 114, 0, 2, 0, 0, 0, 0, 3, 117, 115, 101, 114, 115, 0,\n242, 255, 255, 255, 0, 2, 0, 0, 0, 0, 4, 83, 111, 110,\n103, 86, 101, 114, 115, 101, 0, 2, 0, 5, 0, 0, 0, 2, 115,\n111, 110, 103, 72, 97, 115, 104, 0, 245, 255, 255, 255, 0,\n1, 118, 101, 114, 115, 101, 73, 100, 120, 0, 254, 255,\n255, 255, 0, 2, 67, 111, 109, 109, 97, 110, 100, 0, 2, 0,\n5, 0, 0, 0, 5, 116, 121, 112, 101, 0, 0, 0, 0, 0, 0, 1,\n117, 115, 101, 114, 0, 2, 0, 0, 0, 0, 2, 101, 114, 114,\n111, 114, 0, 1, 0, 0, 0, 0, 3, 115, 101, 115, 115, 105,\n111, 110, 0, 3, 0, 0, 0, 0, 4, 115, 111, 110, 103, 86,\n101, 114, 115, 101, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0\n]);\n\nexport enum CommandType {\n\n  Error = 1,\n\n  Hello = 2,\n\n  SessionCreate = 3,\n\n  SessionDelete = 4,\n\n  SessionJoin = 5,\n\n  SessionLeave = 6,\n\n  SessionGet = 7,\n\n  SessionInfo = 8,\n\n  SongVerse = 9,\n}\n\n\nexport interface IError extends BebopRecord {\n\n  readonly code: number;\n\n  readonly msg: string;\n}\n\nexport class Error implements IError {\n  public readonly code: number;\n  public readonly msg: string;\n\n  constructor(record: IError) {\n    this.code = record.code;\n    this.msg = record.msg;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return Error.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IError): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    Error.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link Error}.\n   */\n  public static validateCompatibility(record: IError): void {\n    BebopTypeGuard.ensureUint8(record.code)\n    BebopTypeGuard.ensureString(record.msg)\n  }\n\n  /**\n   * Unsafely creates an instance of {@link Error} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IError {\n      return new Error(record);\n  }\n\n  /**\n   * Creates a new {@link Error} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IError {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`Error.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    Error.validateCompatibility(parsed);\n    return Error.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return Error.encode(this);\n  }\n\n  public static encode(record: IError): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    Error.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IError, view: BebopView): number {\n    const before = view.length;\n    view.writeByte(record.code);\n    view.writeString(record.msg);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IError {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return Error.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IError {\n    let field0: number;\n    field0 = view.readByte();\n    let field1: string;\n    field1 = view.readString();\n    let message: IError = {\n      code: field0,\n      msg: field1,\n    };\n    return new Error(message);\n  }\n}\n\n\nexport interface IUser extends BebopRecord {\n\n  name?: string;\n\n  uid?: string;\n}\n\nexport class User implements IUser {\n  public name?: string;\n  public uid?: string;\n\n  constructor(record: IUser) {\n    this.name = record.name;\n    this.uid = record.uid;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return User.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IUser): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    User.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link User}.\n   */\n  public static validateCompatibility(record: IUser): void {\n    if (record.name !== undefined) {\n      BebopTypeGuard.ensureString(record.name)\n    }\n    if (record.uid !== undefined) {\n      BebopTypeGuard.ensureString(record.uid)\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link User} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IUser {\n      return new User(record);\n  }\n\n  /**\n   * Creates a new {@link User} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IUser {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`User.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    User.validateCompatibility(parsed);\n    return User.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return User.encode(this);\n  }\n\n  public static encode(record: IUser): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    User.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IUser, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length;\n    if (record.name !== undefined) {\n      view.writeByte(1);\n      view.writeString(record.name);\n    }\n    if (record.uid !== undefined) {\n      view.writeByte(2);\n      view.writeString(record.uid);\n    }\n    view.writeByte(0);\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IUser {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return User.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IUser {\n    let message: IUser = {};\n    const length = view.readMessageLength();\n    const end = view.index + length;\n    while (true) {\n      switch (view.readByte()) {\n        case 0:\n          return new User(message);\n\n        case 1:\n          message.name = view.readString();\n          break;\n\n        case 2:\n          message.uid = view.readString();\n          break;\n\n        default:\n          view.index = end;\n          return new User(message);\n      }\n    }\n  }\n}\n\n\nexport interface ISession extends BebopRecord {\n\n  id?: string;\n\n  name?: string;\n\n  owner?: IUser;\n\n  users?: Array<IUser>;\n}\n\nexport class Session implements ISession {\n  public id?: string;\n  public name?: string;\n  public owner?: IUser;\n  public users?: Array<IUser>;\n\n  constructor(record: ISession) {\n    this.id = record.id;\n    this.name = record.name;\n    this.owner = record.owner;\n    this.users = record.users;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return Session.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISession): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    Session.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link Session}.\n   */\n  public static validateCompatibility(record: ISession): void {\n    if (record.id !== undefined) {\n      BebopTypeGuard.ensureString(record.id)\n    }\n    if (record.name !== undefined) {\n      BebopTypeGuard.ensureString(record.name)\n    }\n    if (record.owner !== undefined) {\n      User.validateCompatibility(record.owner);\n    }\n    if (record.users !== undefined) {\n      BebopTypeGuard.ensureArray(record.users, User.validateCompatibility);\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link Session} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISession {\n      if (record.owner !== undefined) {\n        record.owner = User.unsafeCast(record.owner);\n      }\n      return new Session(record);\n  }\n\n  /**\n   * Creates a new {@link Session} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISession {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`Session.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    Session.validateCompatibility(parsed);\n    return Session.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return Session.encode(this);\n  }\n\n  public static encode(record: ISession): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    Session.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISession, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length;\n    if (record.id !== undefined) {\n      view.writeByte(1);\n      view.writeString(record.id);\n    }\n    if (record.name !== undefined) {\n      view.writeByte(2);\n      view.writeString(record.name);\n    }\n    if (record.owner !== undefined) {\n      view.writeByte(3);\n      User.encodeInto(record.owner, view)\n    }\n    if (record.users !== undefined) {\n      view.writeByte(4);\n      {\n      const length0 = record.users.length;\n      view.writeUint32(length0);\n      for (let i0 = 0; i0 < length0; i0++) {\n        User.encodeInto(record.users[i0], view)\n      }\n    }\n    }\n    view.writeByte(0);\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISession {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return Session.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISession {\n    let message: ISession = {};\n    const length = view.readMessageLength();\n    const end = view.index + length;\n    while (true) {\n      switch (view.readByte()) {\n        case 0:\n          return new Session(message);\n\n        case 1:\n          message.id = view.readString();\n          break;\n\n        case 2:\n          message.name = view.readString();\n          break;\n\n        case 3:\n          message.owner = User.readFrom(view);\n          break;\n\n        case 4:\n          {\n        let length0 = view.readUint32();\n        message.users = new Array<IUser>(length0);\n        for (let i0 = 0; i0 < length0; i0++) {\n          let x0: IUser;\n          x0 = User.readFrom(view);\n          message.users[i0] = x0;\n        }\n      }\n          break;\n\n        default:\n          view.index = end;\n          return new Session(message);\n      }\n    }\n  }\n}\n\n\nexport interface ISongVerse extends BebopRecord {\n\n  songHash?: string;\n\n  verseIdx?: number;\n}\n\nexport class SongVerse implements ISongVerse {\n  public songHash?: string;\n  public verseIdx?: number;\n\n  constructor(record: ISongVerse) {\n    this.songHash = record.songHash;\n    this.verseIdx = record.verseIdx;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return SongVerse.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ISongVerse): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    SongVerse.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link SongVerse}.\n   */\n  public static validateCompatibility(record: ISongVerse): void {\n    if (record.songHash !== undefined) {\n      BebopTypeGuard.ensureString(record.songHash)\n    }\n    if (record.verseIdx !== undefined) {\n      BebopTypeGuard.ensureUint8(record.verseIdx)\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link SongVerse} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ISongVerse {\n      return new SongVerse(record);\n  }\n\n  /**\n   * Creates a new {@link SongVerse} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ISongVerse {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`SongVerse.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    SongVerse.validateCompatibility(parsed);\n    return SongVerse.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return SongVerse.encode(this);\n  }\n\n  public static encode(record: ISongVerse): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    SongVerse.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ISongVerse, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length;\n    if (record.songHash !== undefined) {\n      view.writeByte(1);\n      view.writeString(record.songHash);\n    }\n    if (record.verseIdx !== undefined) {\n      view.writeByte(2);\n      view.writeByte(record.verseIdx);\n    }\n    view.writeByte(0);\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ISongVerse {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return SongVerse.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ISongVerse {\n    let message: ISongVerse = {};\n    const length = view.readMessageLength();\n    const end = view.index + length;\n    while (true) {\n      switch (view.readByte()) {\n        case 0:\n          return new SongVerse(message);\n\n        case 1:\n          message.songHash = view.readString();\n          break;\n\n        case 2:\n          message.verseIdx = view.readByte();\n          break;\n\n        default:\n          view.index = end;\n          return new SongVerse(message);\n      }\n    }\n  }\n}\n\n\nexport interface ICommand extends BebopRecord {\n\n  type?: CommandType;\n\n  user?: IUser;\n\n  error?: IError;\n\n  session?: ISession;\n\n  songVerse?: ISongVerse;\n}\n\nexport class Command implements ICommand {\n  public type?: CommandType;\n  public user?: IUser;\n  public error?: IError;\n  public session?: ISession;\n  public songVerse?: ISongVerse;\n\n  constructor(record: ICommand) {\n    this.type = record.type;\n    this.user = record.user;\n    this.error = record.error;\n    this.session = record.session;\n    this.songVerse = record.songVerse;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return Command.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ICommand): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    Command.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link Command}.\n   */\n  public static validateCompatibility(record: ICommand): void {\n    if (record.type !== undefined) {\n      BebopTypeGuard.ensureEnum(record.type, CommandType);\n    }\n    if (record.user !== undefined) {\n      User.validateCompatibility(record.user);\n    }\n    if (record.error !== undefined) {\n      Error.validateCompatibility(record.error);\n    }\n    if (record.session !== undefined) {\n      Session.validateCompatibility(record.session);\n    }\n    if (record.songVerse !== undefined) {\n      SongVerse.validateCompatibility(record.songVerse);\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link Command} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ICommand {\n      if (record.user !== undefined) {\n        record.user = User.unsafeCast(record.user);\n      }\n      if (record.error !== undefined) {\n        record.error = Error.unsafeCast(record.error);\n      }\n      if (record.session !== undefined) {\n        record.session = Session.unsafeCast(record.session);\n      }\n      if (record.songVerse !== undefined) {\n        record.songVerse = SongVerse.unsafeCast(record.songVerse);\n      }\n      return new Command(record);\n  }\n\n  /**\n   * Creates a new {@link Command} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ICommand {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`Command.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    Command.validateCompatibility(parsed);\n    return Command.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return Command.encode(this);\n  }\n\n  public static encode(record: ICommand): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    Command.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ICommand, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length;\n    if (record.type !== undefined) {\n      view.writeByte(1);\n      view.writeUint32(record.type);\n    }\n    if (record.user !== undefined) {\n      view.writeByte(2);\n      User.encodeInto(record.user, view)\n    }\n    if (record.error !== undefined) {\n      view.writeByte(3);\n      Error.encodeInto(record.error, view)\n    }\n    if (record.session !== undefined) {\n      view.writeByte(4);\n      Session.encodeInto(record.session, view)\n    }\n    if (record.songVerse !== undefined) {\n      view.writeByte(5);\n      SongVerse.encodeInto(record.songVerse, view)\n    }\n    view.writeByte(0);\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ICommand {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return Command.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ICommand {\n    let message: ICommand = {};\n    const length = view.readMessageLength();\n    const end = view.index + length;\n    while (true) {\n      switch (view.readByte()) {\n        case 0:\n          return new Command(message);\n\n        case 1:\n          message.type = view.readUint32() as CommandType;\n          break;\n\n        case 2:\n          message.user = User.readFrom(view);\n          break;\n\n        case 3:\n          message.error = Error.readFrom(view);\n          break;\n\n        case 4:\n          message.session = Session.readFrom(view);\n          break;\n\n        case 5:\n          message.songVerse = SongVerse.readFrom(view);\n          break;\n\n        default:\n          view.index = end;\n          return new Command(message);\n      }\n    }\n  }\n}\n\n"]}