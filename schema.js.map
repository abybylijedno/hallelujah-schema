{"version":3,"sources":["schema.ts"],"names":[],"mappings":"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","file":"schema.js","sourcesContent":["//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//\n//\n//       bebopc version:\n//           3.1.3\n//\n//\n//       bebopc source:\n//           https://github.com/betwixt-labs/bebop\n//\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\nimport { BebopView, BebopRuntimeError, BebopRecord, BebopJson, BebopTypeGuard, Guid, GuidMap } from \"bebop\";\n\nexport const BEBOP_SCHEMA = new Uint8Array ([\n3, 3, 0, 0, 0, 85, 115, 101, 114, 0, 2, 0, 5, 0, 0, 0, 2,\n110, 97, 109, 101, 0, 245, 255, 255, 255, 0, 1, 117, 105,\n100, 0, 245, 255, 255, 255, 0, 2, 67, 111, 109, 109, 97,\n110, 100, 84, 121, 112, 101, 0, 4, 0, 251, 255, 255, 255,\n0, 4, 0, 0, 0, 7, 69, 82, 82, 79, 82, 0, 0, 1, 0, 0, 0,\n72, 69, 76, 76, 79, 0, 0, 2, 0, 0, 0, 83, 69, 83, 83, 73,\n79, 78, 95, 67, 82, 69, 65, 84, 69, 0, 0, 3, 0, 0, 0, 83,\n69, 83, 83, 73, 79, 78, 95, 74, 79, 73, 78, 0, 0, 4, 0, 0,\n0, 83, 69, 83, 83, 73, 79, 78, 95, 73, 78, 70, 79, 0, 0,\n5, 0, 0, 0, 83, 69, 83, 83, 73, 79, 78, 95, 71, 69, 84, 0,\n0, 6, 0, 0, 0, 83, 79, 78, 71, 95, 83, 72, 79, 87, 0, 0,\n10, 0, 0, 0, 67, 111, 109, 109, 97, 110, 100, 0, 2, 0, 5,\n0, 0, 0, 3, 116, 121, 112, 101, 0, 1, 0, 0, 0, 0, 1, 117,\n115, 101, 114, 0, 0, 0, 0, 0, 0, 2, 100, 97, 116, 97, 0,\n245, 255, 255, 255, 0, 3, 0, 0, 0, 0\n]);\n\nexport interface IUser extends BebopRecord {\n\n  name?: string;\n\n  uid?: string;\n}\n\nexport class User implements IUser {\n  public name?: string;\n  public uid?: string;\n\n  constructor(record: IUser) {\n    this.name = record.name;\n    this.uid = record.uid;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return User.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: IUser): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    User.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link User}.\n   */\n  public static validateCompatibility(record: IUser): void {\n    if (record.name !== undefined) {\n      BebopTypeGuard.ensureString(record.name)\n    }\n    if (record.uid !== undefined) {\n      BebopTypeGuard.ensureString(record.uid)\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link User} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): IUser {\n      return new User(record);\n  }\n\n  /**\n   * Creates a new {@link User} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): IUser {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`User.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    User.validateCompatibility(parsed);\n    return User.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return User.encode(this);\n  }\n\n  public static encode(record: IUser): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    User.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: IUser, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length;\n    if (record.name !== undefined) {\n      view.writeByte(1);\n      view.writeString(record.name);\n    }\n    if (record.uid !== undefined) {\n      view.writeByte(2);\n      view.writeString(record.uid);\n    }\n    view.writeByte(0);\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): IUser {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return User.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): IUser {\n    let message: IUser = {};\n    const length = view.readMessageLength();\n    const end = view.index + length;\n    while (true) {\n      switch (view.readByte()) {\n        case 0:\n          return new User(message);\n\n        case 1:\n          message.name = view.readString();\n          break;\n\n        case 2:\n          message.uid = view.readString();\n          break;\n\n        default:\n          view.index = end;\n          return new User(message);\n      }\n    }\n  }\n}\n\n\nexport enum CommandType {\n\n  Error = 1,\n\n  Hello = 2,\n\n  SessionCreate = 3,\n\n  SessionJoin = 4,\n\n  SessionInfo = 5,\n\n  SessionGet = 6,\n\n  SongShow = 10,\n}\n\n\nexport interface ICommand extends BebopRecord {\n\n  type?: CommandType;\n\n  user?: IUser;\n\n  data?: string;\n}\n\nexport class Command implements ICommand {\n  public type?: CommandType;\n  public user?: IUser;\n  public data?: string;\n\n  constructor(record: ICommand) {\n    this.type = record.type;\n    this.user = record.user;\n    this.data = record.data;\n  }\n\n  /**\n   * Serializes the current instance into a JSON-Over-Bebop string\n   */\n  public stringify(): string {\n    return Command.encodeToJSON(this);\n  }\n\n  /**\n   * Serializes the specified object into a JSON-Over-Bebop string\n   */\n  public static encodeToJSON(record: ICommand): string {\n    return JSON.stringify(record, BebopJson.replacer);\n  }\n\n  /**\n   * Validates that the runtime types of members in the current instance are correct.\n   */\n  public validateTypes(): void {\n    Command.validateCompatibility(this);\n  }\n\n  /**\n   * Validates that the specified dynamic object can become an instance of {@link Command}.\n   */\n  public static validateCompatibility(record: ICommand): void {\n    if (record.type !== undefined) {\n      BebopTypeGuard.ensureEnum(record.type, CommandType);\n    }\n    if (record.user !== undefined) {\n      User.validateCompatibility(record.user);\n    }\n    if (record.data !== undefined) {\n      BebopTypeGuard.ensureString(record.data)\n    }\n  }\n\n  /**\n   * Unsafely creates an instance of {@link Command} from the specified dynamic object. No type checking is performed.\n   */\n  public static unsafeCast(record: any): ICommand {\n      if (record.user !== undefined) {\n        record.user = User.unsafeCast(record.user);\n      }\n      return new Command(record);\n  }\n\n  /**\n   * Creates a new {@link Command} instance from a JSON-Over-Bebop string. Type checking is performed.\n   */\n  public static fromJSON(json: string): ICommand {\n    if (typeof json !== 'string' || json.trim().length === 0) {\n      throw new BebopRuntimeError(`Command.fromJSON: expected string`);\n    }\n    const parsed = JSON.parse(json, BebopJson.reviver);\n    Command.validateCompatibility(parsed);\n    return Command.unsafeCast(parsed);\n  }\n  public encode(): Uint8Array {\n    return Command.encode(this);\n  }\n\n  public static encode(record: ICommand): Uint8Array {\n    const view = BebopView.getInstance();\n    view.startWriting();\n    Command.encodeInto(record, view);\n    return view.toArray();\n  }\n\n  public static encodeInto(record: ICommand, view: BebopView): number {\n    const before = view.length;\n    const pos = view.reserveMessageLength();\n    const start = view.length;\n    if (record.type !== undefined) {\n      view.writeByte(1);\n      view.writeUint32(record.type);\n    }\n    if (record.user !== undefined) {\n      view.writeByte(2);\n      User.encodeInto(record.user, view)\n    }\n    if (record.data !== undefined) {\n      view.writeByte(3);\n      view.writeString(record.data);\n    }\n    view.writeByte(0);\n    const end = view.length;\n    view.fillMessageLength(pos, end - start);\n    const after = view.length;\n    return after - before;\n  }\n\n  public static decode(buffer: Uint8Array): ICommand {\n    const view = BebopView.getInstance();\n    view.startReading(buffer);\n    return Command.readFrom(view);\n  }\n\n  public static readFrom(view: BebopView): ICommand {\n    let message: ICommand = {};\n    const length = view.readMessageLength();\n    const end = view.index + length;\n    while (true) {\n      switch (view.readByte()) {\n        case 0:\n          return new Command(message);\n\n        case 1:\n          message.type = view.readUint32() as CommandType;\n          break;\n\n        case 2:\n          message.user = User.readFrom(view);\n          break;\n\n        case 3:\n          message.data = view.readString();\n          break;\n\n        default:\n          view.index = end;\n          return new Command(message);\n      }\n    }\n  }\n}\n\n"]}